<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Azkaban常见错误与解决方法</title>
    <url>/2022/02/09/AzkabanError/</url>
    <content><![CDATA[<p>Azkaban 常见错误<br>1.创建project时ERROR: Insert projecttest for existing project failed.<br>创建project时报ERROR: Insert projecttest for existing project failed.错误，需要检查项目名称和描述中是否有中文。</p>
<p>2.首次运行时可能的报错ERROR [ExecutorServlet] [Azkaban] executor became inactive before setting up the flow 1 azkaban.executor.ExecutorManagerException: executor became inactive before setting up the flow 1<br>需要手动去激活一下 executor，方式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -G <span class="string">&quot;http://192.168.2.112:12013/executor?action=activate&quot;</span> &amp;&amp; <span class="built_in">echo</span></span><br></pre></td></tr></table></figure>

<p>3.执行 Flow 一直处于 Preparing 状态<br>修改 web-server conf&#x2F;azkaban.properties 配置<br>execute 主机过滤器配置, 去掉 MinimumFreeMemory<br>MinimumFreeMemory 过滤器会检查 executor 主机空余内存是否会大于 6G，如果不足 6G，则 web-server 不会将任务交由该主机执行<br>azkaban.executorselector.filters&#x3D;StaticRemainingFlowSize,CpuStatus</p>
<p>4.web服务无法启动<br>   修改mysql库的excutors表的active字段为1</p>
<p>5.jar包上传报错<br>    1.查看.flow文件是否含有’\t’<br>    2.查看dependences依赖是否有误</p>
<p>持续更新中……</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Azkaban</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Azkaban</tag>
      </tags>
  </entry>
  <entry>
    <title>Azkaban之flow2.0的使用</title>
    <url>/2022/04/21/Azkaban%E4%B9%8Bflow2-0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p style="text-indent:2em;">如果你时间充足，可以移步官网详细了解。也可以跟着本文,快速掌握配置方法，同时避免因官网不详细而跳坑！</p>
<p style="text-indent:2em;">官网：https://azkaban.readthedocs.io/en/latest/createFlows.html</p>
<p style="text-indent:2em;">首先，你需要先创建project文件夹，层级如下：</p>
<img src="/2022/04/21/Azkaban%E4%B9%8Bflow2-0%E7%9A%84%E4%BD%BF%E7%94%A8/1.jpg" class title="这是一个新的博客的图片的说明">
<p style="text-indent:2em;">在test.project文件里,指定以flow2.0方式配置,内容如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">azkaban<span class="operator">-</span>flow<span class="operator">-</span>version: <span class="number">2.0</span></span><br></pre></td></tr></table></figure>
<p style="text-indent:2em;">在test.flow里配置工作流，示例如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">config:</span><br><span class="line">  retries: <span class="number">2</span></span><br><span class="line">  retry.backoff: <span class="number">30000</span></span><br><span class="line">  failure.emails: xxx<span class="variable">@163</span>.com</span><br><span class="line">  start_date: nil</span><br><span class="line">  stop_date: nil</span><br><span class="line">  flow<span class="operator">-</span>level<span class="operator">-</span><span class="keyword">parameter</span>: <span class="keyword">value</span></span><br><span class="line"></span><br><span class="line">nodes:</span><br><span class="line">  <span class="operator">-</span> name: test</span><br><span class="line">    type: command</span><br><span class="line">    config:</span><br><span class="line">      command: echo &quot;开始节点&quot;</span><br><span class="line">       </span><br><span class="line">#Flow1流：    </span><br><span class="line">  <span class="operator">-</span> name: test_flow1</span><br><span class="line">    type: flow</span><br><span class="line">    config:</span><br><span class="line">      prop: <span class="keyword">value</span></span><br><span class="line">    dependsOn:</span><br><span class="line">      <span class="operator">-</span> test</span><br><span class="line">    nodes:   </span><br><span class="line">      <span class="operator">-</span> name: test_job1</span><br><span class="line">        type: command</span><br><span class="line">        config:</span><br><span class="line">          remark: 备注test_job1</span><br><span class="line">          start_dt: $&#123;start_date&#125;</span><br><span class="line">          stop_dt: $&#123;stop_date&#125;</span><br><span class="line">          command: echo 测试！</span><br><span class="line"></span><br><span class="line">      <span class="operator">-</span> name: test_job2</span><br><span class="line">        type: command</span><br><span class="line">        config:</span><br><span class="line">          start_dt: $&#123;start_date&#125;</span><br><span class="line">          stop_dt: $&#123;stop_date&#125;</span><br><span class="line">          command: echo 测试！</span><br><span class="line">        dependsOn:</span><br><span class="line">         <span class="operator">-</span> test_job1</span><br><span class="line"></span><br><span class="line">      <span class="operator">-</span> name: test_job3</span><br><span class="line">        type: command</span><br><span class="line">        config:</span><br><span class="line">          start_dt: $&#123;start_date&#125;</span><br><span class="line">          stop_dt: $&#123;stop_date&#125;</span><br><span class="line">          command: echo 测试！</span><br><span class="line">        dependsOn:</span><br><span class="line">         <span class="operator">-</span> test_job1</span><br><span class="line">  </span><br><span class="line">      <span class="operator">-</span> name: test_job4</span><br><span class="line">        type: command</span><br><span class="line">        config:</span><br><span class="line">          start_dt: $&#123;start_date&#125;</span><br><span class="line">          stop_dt: $&#123;stop_date&#125;</span><br><span class="line">          command: echo 测试！</span><br><span class="line">        <span class="keyword">condition</span>: all_done   #设置不论test_job2 、test_job3是否成功,只要执行了，test_job4就执行。</span><br><span class="line">        </span><br><span class="line">        ##################################################################################################</span><br><span class="line">        #all_done 对应的作业状态 FAILED, KILLED, SUCCEEDED, SKIPPED, FAILED_SUCCEEDED, CANCELLED</span><br><span class="line">        #all_success \ one_success 对应的作业状态 SUCCEEDED, SKIPPED, FAILED_SUCCEEDED</span><br><span class="line">        #all_failed \ one_failed 对应的作业状态 FAILED, KILLED, CANCELLED</span><br><span class="line">        ##################################################################################################</span><br><span class="line">        </span><br><span class="line">        dependsOn:</span><br><span class="line">         <span class="operator">-</span> test_job2  </span><br><span class="line">         <span class="operator">-</span> test_job3  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">#Flow2流：    </span><br><span class="line">  <span class="operator">-</span> name: test_flow2</span><br><span class="line">    type: flow</span><br><span class="line">    config:</span><br><span class="line">      prop: <span class="keyword">value</span></span><br><span class="line">    dependsOn:</span><br><span class="line">      <span class="operator">-</span> test_flow1</span><br><span class="line">    nodes:     </span><br><span class="line">      <span class="operator">-</span> name: test_job5</span><br><span class="line">        type: command</span><br><span class="line">        config:</span><br><span class="line">          start_dt: $&#123;start_date&#125;</span><br><span class="line">          stop_dt: $&#123;stop_date&#125;</span><br><span class="line">          command: echo 测试！  </span><br></pre></td></tr></table></figure>
<p style="text-indent:2em;">打包压缩,上传Azlaban，Graph如下：</p>
<img src="/2022/04/21/Azkaban%E4%B9%8Bflow2-0%E7%9A%84%E4%BD%BF%E7%94%A8/2.jpg" class title="这是一个新的博客的图片的说明">
<p style="text-indent:2em;">需注意,同一个project里,可以分出多个文件夹,对应多个workflow。但同一个workflow，只允许出现一个.flow文件。在.flow文件里，可以配置多个流。在这个例子中有两个流，
流内的job只能依赖于同一个流的job，而流只能依赖于上一个流或者独立的job，不能依赖于上一个流内的job。流与流，job与job间可以配置条件依赖,如本例中的job4，当job2/job3执行后即执行，不管失败与否。在流的顶部可以配置公共参数,包括预定参数与自定义参数。如有问题，可邮件联系作者哦！</p>









]]></content>
      <categories>
        <category>大数据</category>
        <category>Azkaban</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Azkaban</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Next调整首页文章间距[绝对有效]</title>
    <url>/2022/02/17/Hexo-Next%E8%B0%83%E6%95%B4%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E9%97%B4%E8%B7%9D/</url>
    <content><![CDATA[<p style="text-indent:2em;">夜深了,话不多说,直接摆方案：</p>
<p style="text-indent:2em;">找到Blog\themes\next\source\css\_schemes\Mist\_posts-expand.styl,定位.post-block:not(:first-child)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> .post<span class="operator">-</span>block:<span class="keyword">not</span>(:<span class="keyword">first</span><span class="operator">-</span>child) &#123;</span><br><span class="line">   margin<span class="operator">-</span>top: <span class="number">0</span>px;</span><br><span class="line">margin<span class="operator">-</span>bottom: <span class="number">0</span>px;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p style="text-indent:2em;">修改成以上代码就行了！原先配置只有margin-top: 130px;自己改改！</p>
<p style="text-indent:2em;">如果按网上设置了文章阴影效果,记得修改一下Blog\themes\next\source\css\_common\components\post\post.styl配置,把文章顶部距离调为0,这样首页才是想要的效果！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">.use<span class="operator">-</span>motion &#123;</span><br><span class="line">  if (hexo<span class="operator">-</span>config(<span class="string">&#x27;motion.transition.post_block&#x27;</span>)) &#123;</span><br><span class="line">    .post<span class="operator">-</span>block&#123;</span><br><span class="line">	 opacity: <span class="number">0</span>;</span><br><span class="line">     margin<span class="operator">-</span>top: <span class="number">0</span>px;</span><br><span class="line">     margin<span class="operator">-</span>bottom: <span class="number">0</span>px;</span><br><span class="line">     padding: <span class="number">25</span>px;</span><br><span class="line">     <span class="operator">-</span>webkit<span class="operator">-</span>box<span class="operator">-</span>shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">41</span>,<span class="number">36</span>,<span class="number">33</span>, <span class="number">1</span>);</span><br><span class="line">     <span class="operator">-</span>moz<span class="operator">-</span>box<span class="operator">-</span>shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">41</span>,<span class="number">36</span>,<span class="number">33</span>, <span class="number">1</span>);</span><br><span class="line">	&#125; .pagination, .comments &#123;</span><br><span class="line">      opacity: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p style="text-indent:2em;">完事儿,大功告成！觉得有用就留个言吧！</p> ]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive源码解析(持续更新)</title>
    <url>/2022/04/18/Hive%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<img src="/2022/04/18/Hive%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/1.jpg" class title="Hive源码解析">









]]></content>
      <categories>
        <category>大数据</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive表误删导致数据丢失的解决方案</title>
    <url>/2022/03/04/Hive%E8%A1%A8%E8%AF%AF%E5%88%A0%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p style="text-indent:2em;">不小心把Hive表删了咋办？主管还有30秒到达战场？</p>
<p style="text-indent:2em;">莫慌,Hive能用这么久,数据安全性还是很ok的。</p>
<p style="text-indent:2em;">如果是外部表,那恭喜你,数据还在,重新建表,路径保持一致，然后执行以下命令恢复表的元数据：</p>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MSCK REPAIR <span class="keyword">TABLE</span> default.tbl;</span><br></pre></td></tr></table></figure>
<p style="text-indent:2em;">如果是内部表,去HDFS下找到回收站目录,找到删除的表,我的路径是：/user/hive/.Trash/Current/user/hive/warehouse/default.db/tbl</p>
<p style="text-indent:2em;">进去目录,发现数据还在(默认保存3天),接下来复制到表路径下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">cp</span> \ </span><br><span class="line">/user/hive/.Trash/Current/user/hive/warehouse/default.db/tbl \     </span><br><span class="line">/user/hive/warehouse//default.db/tbl</span><br></pre></td></tr></table></figure>
<p style="text-indent:2em;">select以下,发现数据已经恢复了,笑了半截主管来了！</p>]]></content>
      <categories>
        <category>大数据</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql报错Row was cut by GROUP_CONCAT的解决方法</title>
    <url>/2022/02/15/MysqlGroupConcatWasCutError/</url>
    <content><![CDATA[<p style="text-indent:2em;">MySQL执行存储过程报错：Row XXX was cut by GROUP_CONCAT(),但把语句copy出来执行就不报错,怎么办？</p>
<p style="text-indent:2em;">我们可以到存储过程中,添加：</p>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#设置会话级别的GROUP_CONCAT最大长度</span><br><span class="line"><span class="keyword">SET</span> group_concat_max_len<span class="operator">=</span><span class="number">102400</span>;</span><br></pre></td></tr></table></figure>
<p style="text-indent:2em;">再次执行,发现不报错了。经尝试,网上通过 SET GLOBAL group_concat_max_len=102400 来设置全局变量,不能解决报错问题!</p>]]></content>
      <categories>
        <category>trouble</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql使用语法整理</title>
    <url>/2022/04/21/Mysql%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#######################################MySQL基本操作#######################################</span><br><span class="line"></span><br><span class="line">(一)基础操作</span><br><span class="line"><span class="number">1.</span>时间函数</span><br><span class="line">	①格式化时间格式：DATE_FORMAT(createtime,<span class="string">&#x27;%Y%m%d HH:mm:ss&#x27;</span>)</span><br><span class="line">	②FROM_UNIXTIME(createtime)   <span class="number">10</span>位时间戳转时间</span><br><span class="line">	</span><br><span class="line"><span class="number">2.</span>字符串函数</span><br><span class="line">	①获取字符串长度：<span class="keyword">CHAR_LENGTH</span>(mobile)</span><br><span class="line">	②字符串拼接：concat、concat_ws</span><br><span class="line">	③LOCATE(<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;a-b&#x27;</span>)  查询某字符所在字符串的位置，从<span class="number">1</span>开始</span><br><span class="line">	④获取表字段：<span class="keyword">select</span> concat(<span class="string">&#x27;&quot;&#x27;</span>,COLUMN_NAME,<span class="string">&#x27;&quot;,&#x27;</span>) <span class="keyword">from</span> information_schema.COLUMNS <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;bigmarketing_broker_profit&#x27;</span>;</span><br><span class="line">          <span class="keyword">select</span> replace(GROUP_CONCAT(concat(COLUMN_NAME,<span class="string">&#x27;,&#x27;</span>)),<span class="string">&#x27;,,&#x27;</span>,<span class="string">&#x27;,&#x27;</span>) <span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">distinct</span>  COLUMN_NAME <span class="keyword">from</span> information_schema.COLUMNS <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;dimdate&#x27;</span>) t1;</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）获取第<span class="number">2</span>个以逗号为分隔符之前的所有字符。</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;7654,7698,7782,7788&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">（<span class="number">2</span>）获取最后一个到倒数第<span class="number">2</span>个以逗号分隔符之后的所有字符</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;7654,7698,7782,7788&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>更新数据：</span><br><span class="line">	<span class="keyword">UPDATE</span> Persons <span class="keyword">SET</span> LastName<span class="operator">=</span><span class="string">&#x27;Wilson&#x27;</span> <span class="keyword">WHERE</span> LastName<span class="operator">=</span><span class="string">&#x27;Gates&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>爆炸函数</span><br><span class="line">   需要准备一个有自增id的表：help_topic</span><br><span class="line">   原表与辅助表不等值连接，连接条件是 help_id<span class="operator">&lt;</span></span><br><span class="line">	<span class="keyword">SELECT</span> pub.mobile,substring_index( substring_index( pub.houseIds, <span class="string">&#x27;,&#x27;</span>, b.help_id), <span class="string">&#x27;,&#x27;</span>,<span class="operator">-</span> <span class="number">1</span> ) houseid</span><br><span class="line">	<span class="keyword">FROM</span> ims_weixinmao_house_publiccustomer pub</span><br><span class="line">	<span class="keyword">JOIN</span> help_topic b <span class="keyword">ON</span> b.help_id <span class="operator">&lt;</span> ( length( pub.houseIds ) <span class="operator">-</span> length( REPLACE ( pub.houseIds, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span> ) ) <span class="operator">+</span> <span class="number">1</span> )</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>行转列函数</span><br><span class="line">	GROUP_CONCAT(<span class="keyword">column</span>)    <span class="operator">/</span><span class="operator">/</span>把某列的所有内容，用逗号分割放在一行中</span><br><span class="line">	GROUP_CONCAT(<span class="keyword">distinct</span> <span class="keyword">column</span>)    <span class="operator">/</span><span class="operator">/</span>把某列的所有内容，用逗号分割放在一行中,并去重</span><br><span class="line">        GROUP_CONCAT(<span class="keyword">distinct</span> if(<span class="keyword">column</span> <span class="operator">&lt;</span><span class="number">5</span>,<span class="keyword">column</span>,<span class="keyword">null</span>)) 加条件筛选，只把<span class="keyword">column</span> <span class="operator">&lt;</span> <span class="number">5</span>的值，去重拼接在一起。</span><br><span class="line">	GROUP_CONCAT(<span class="keyword">distinct</span> if(phaseNumber <span class="operator">&lt;</span> <span class="number">5</span>,phaseNumber,<span class="keyword">null</span>) <span class="keyword">order</span> <span class="keyword">by</span> phaseNumber <span class="keyword">desc</span>) 加条件筛选，只把<span class="keyword">column</span> <span class="operator">&lt;</span> <span class="number">5</span>的值，去重并按升序拼接在一起。</span><br><span class="line">        GROUP_CONCAT( Separator <span class="string">&#x27;;&#x27;</span>)  以分号分割</span><br><span class="line">	##用行转列获取表全字段</span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">	GROUP_CONCAT(column_name)</span><br><span class="line">	<span class="keyword">from</span> information_schema.columns </span><br><span class="line">	<span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;database_name&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;table1&#x27;</span>;</span><br><span class="line">(二)进阶优化操作</span><br><span class="line"><span class="number">1.</span>给列添加普通索引(能大大加快查询和关联的速度)</span><br><span class="line">	<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `table_name` <span class="keyword">ADD</span> INDEX index_name ( `<span class="keyword">column</span>` )</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>联合唯一索引(索引字段是唯一的，插入时有则更新，无则插入)</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span>  ods_we7.ims_weixinmao_house_annual_target</span><br><span class="line">	    <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> INDEX  year_house_phases_property(`personnel_name`, `target_year`);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>存储过程</span><br><span class="line"></span><br><span class="line">  ①创建存储过程</span><br><span class="line">	DELIMITER <span class="operator">&amp;</span></span><br><span class="line">	<span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ads_broker_achievement_01()</span><br><span class="line">	<span class="keyword">BEGIN</span></span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span><span class="keyword">sql</span>代码</span><br><span class="line">	<span class="keyword">END</span> <span class="operator">&amp;</span></span><br><span class="line">  ②调用存储过程</span><br><span class="line">	<span class="keyword">CALL</span> ads_broker_achievement00();</span><br><span class="line">  ③删除存储过程</span><br><span class="line">	<span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> ads_broker_achievement000;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>存储过程的使用</span><br><span class="line"></span><br><span class="line">  ①定义变量</span><br><span class="line">        <span class="keyword">DECLARE</span> var_name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="keyword">null</span>;</span><br><span class="line">    为变量赋值</span><br><span class="line">	<span class="number">1.</span>常规赋值 <span class="keyword">SET</span> var_name <span class="operator">=</span> <span class="string">&#x27;value&#x27;</span></span><br><span class="line">        <span class="number">2.</span>查询赋值 <span class="keyword">set</span> <span class="variable">@date1</span> <span class="operator">=</span> (<span class="keyword">select</span> <span class="built_in">max</span>(create_time) <span class="keyword">from</span> <span class="keyword">table</span>);</span><br><span class="line">	           <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> n_total <span class="keyword">FROM</span> db_database11.tb_user;</span><br><span class="line">  ②IF结构</span><br><span class="line">        IF createtime <span class="operator">=</span> DATE_FORMAT(now(),<span class="string">&#x27;%Y%m%d&#x27;</span>) <span class="keyword">then</span> </span><br><span class="line">          <span class="keyword">SET</span> var_name <span class="operator">=</span> <span class="string">&#x27;今天&#x27;</span>;</span><br><span class="line">         <span class="keyword">ELSE</span>  <span class="keyword">set</span> var_name <span class="operator">=</span> <span class="string">&#x27;过去&#x27;</span>;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line">  ③WHILE结构</span><br><span class="line">       	WHILE a <span class="operator">&lt;</span> <span class="number">100</span> DO</span><br><span class="line">           <span class="keyword">SET</span> j <span class="operator">=</span> j<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">          <span class="keyword">END</span> WHILE;</span><br><span class="line"></span><br><span class="line">  ④循环结构</span><br><span class="line">        <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">        REPEAT</span><br><span class="line">	<span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">        ……</span><br><span class="line">	……</span><br><span class="line">	UNTIL <span class="number">1</span> <span class="operator">&gt;=</span> <span class="number">100</span> </span><br><span class="line">	<span class="keyword">END</span> REPEAT;</span><br><span class="line">  ⑤更新表字段</span><br><span class="line">	<span class="keyword">update</span> table1 di  </span><br><span class="line">        <span class="keyword">set</span>   di.column1 <span class="operator">=</span>  <span class="number">1</span>;</span><br><span class="line">	关联更新时，最好使用<span class="keyword">join</span>，能更改符合条件的字段，其他不符合条件的不改变。</span><br><span class="line"> 	使用<span class="keyword">left</span> <span class="keyword">join</span>，不符合条件的，会置空。</span><br><span class="line"></span><br><span class="line"> <span class="keyword">COMMIT</span>;</span><br><span class="line"> <span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>函数</span><br><span class="line"> 	<span class="keyword">CREATE</span>  <span class="keyword">FUNCTION</span> `rand_num`(from_num <span class="type">INT</span> ,to_num <span class="type">INT</span>) <span class="keyword">RETURNS</span> <span class="type">int</span>(<span class="number">11</span>)  #创建函数（传入a,b返回a<span class="operator">-</span>b的随机数）</span><br><span class="line">	<span class="keyword">BEGIN</span>       </span><br><span class="line"> 		<span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;                                       #定义变量</span><br><span class="line"> 	<span class="keyword">SET</span> i <span class="operator">=</span> <span class="built_in">FLOOR</span>(from_num <span class="operator">+</span>RAND()<span class="operator">*</span>(to_num <span class="operator">-</span>from_num<span class="operator">+</span><span class="number">1</span>))   ;               #变量赋值</span><br><span class="line">	<span class="keyword">RETURN</span> i;                                                              #变量作为函数返回值</span><br><span class="line">        <span class="keyword">END</span></span><br><span class="line"><span class="number">6.</span>事件</span><br><span class="line">  ①创建事件</span><br><span class="line">	<span class="keyword">CREATE</span> EVENT broker_event </span><br><span class="line">	<span class="keyword">ON</span> SCHEDULE <span class="keyword">EVERY</span> <span class="number">1</span> <span class="keyword">DAY</span> STARTS <span class="type">TIMESTAMP</span>(<span class="built_in">CURRENT_DATE</span>,<span class="string">&#x27;02:00:00&#x27;</span>)  #每天<span class="number">2</span>点调度一次</span><br><span class="line">        #<span class="keyword">ON</span> SCHEDULE <span class="keyword">EVERY</span> <span class="number">12</span> <span class="keyword">HOUR</span> STARTS <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">MINUTE</span> ENDS <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">4</span> WEEK</span><br><span class="line">        #每十二个小时，从现在起三十分钟后开始，并于现在起四个星期后结束</span><br><span class="line">        #<span class="keyword">ON</span> SCHEDULE <span class="keyword">AT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">20</span> <span class="keyword">second</span> <span class="number">20</span>秒后执行，只会执行一次。</span><br><span class="line">	<span class="keyword">ON</span> COMPLETION [<span class="keyword">NOT</span>] PRESERVE    #是否循环执行</span><br><span class="line">	COMMENT <span class="string">&#x27;&#x27;</span>   #添加注释</span><br><span class="line">	DO</span><br><span class="line">   	<span class="keyword">call</span> bianliang();</span><br><span class="line">  ②删除事件</span><br><span class="line">	<span class="keyword">DROP</span> event broker_event; </span><br><span class="line">  ③查看事件开启状态</span><br><span class="line">  	<span class="keyword">select</span> @<span class="variable">@event</span>_scheduler;        #查看事件是否开启</span><br><span class="line">	<span class="keyword">set</span> <span class="keyword">global</span> event_scheduler <span class="operator">=</span> <span class="keyword">on</span>; #开启事件</span><br><span class="line">  ④查看事件</span><br><span class="line">	<span class="keyword">SHOW</span> EVENTS;</span><br><span class="line">        <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> EVENT test;</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.events; </span><br><span class="line">  ⑤启动或关闭事件</span><br><span class="line">	<span class="keyword">ALTER</span> EVENT event_user ENABLE;</span><br><span class="line">	<span class="keyword">ALTER</span> EVENT event_user DISABLE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(三)其他注意事项</span><br><span class="line">  ①插入数据注意事项：</span><br><span class="line">	replace <span class="keyword">into</span>若有与主键值或索引值相同的数据，则删除旧数据，插入新数据(若不是主键的话无意义)。</span><br><span class="line">	<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="keyword">values</span>()不推荐使用，插入数据时id主键必须设置为<span class="keyword">null</span>,不会更新数据，扩展性差。</span><br><span class="line">	<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span>(col1,col2) <span class="keyword">values</span>(v1,v2) 不必为自增主键赋值，且字段顺序可以变动。</span><br><span class="line">  ②创建事件流程：</span><br><span class="line">	开启事件调度<span class="comment">--&gt;创建事件--&gt;启动该事件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#表字段编码格式不同，导致无法关联。</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `thesis_answer_ppt` MODIFY `file_path` <span class="type">varchar</span>(<span class="number">2048</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> UTF8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>面试题：<br>主键和唯一索引的区别：<br>主键是约束，唯一索引是索引，本质不同。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客从GitHub部署到Coding的最新方法</title>
    <url>/2022/02/15/gitToCodding/</url>
    <content><![CDATA[<p style="text-indent:2em;">hexo博客只部署在GitHub，是无法被百度爬到的，所以同步Coding便是不错的选择。但是，但是，网上的方法全部都已过时，原因如下：</p>
<p style="text-indent:2em;">①coding变了，一些配置项没有了，生成的地址格式也有所不同。</p>
<p style="text-indent:2em;">②git默认分支变了，按照网上的配置，每次提交会同步到master(在_config.yml里修改为main是无用的)。</p>
<p style="text-indent:2em;">本人在部署时也一脸懵，耐心思考下终于成功了，方法如下：</p>
<p">①创建项目<p></p>
<p style="text-indent:2em;">git登录后，点创建</p>
<img src="/2022/02/15/gitToCodding/1.jpg" class title="这是一个新的博客的图片的说明">
<img src="/2022/02/15/gitToCodding/2.jpg" class title="这是一个新的博客的图片的说明">
<p style="text-indent:2em;">项目名称=标识=git用户名：(以前的启用ReadMe文件初始化项目等git选项没有了，直接完成创建！)</p>
<img src="/2022/02/15/gitToCodding/3.jpg" class title="这是一个新的博客的图片的说明">
<p>②创建代码仓库</p>
<p style="text-indent:2em;">进入项目->代码仓库，创建代码仓库(不要关联)：</p>
<img src="/2022/02/15/gitToCodding/4.jpg" class title="这是一个新的博客的图片的说明">
<p style="text-indent:2em;">创建完成!点进仓库，把地址复制出来：</p>
<img src="/2022/02/15/gitToCodding/7.jpg" class title="这是一个新的博客的图片的说明">
<img src="/2022/02/15/gitToCodding/8.jpg" class title="这是一个新的博客的图片的说明">
<p>③coding加入博客配置</p>
<p style="text-indent:2em;">打开博客根目录，修改_config.yml ：</p>
<p style="text-indent:2em;">这里coding不使用ssh公钥，避免权限问题。分支记得改为main:</p>
<img src="/2022/02/15/gitToCodding/9.jpg" class title="这是一个新的博客的图片的说明">

<p>④coding项目初始化</p>
<img src="/2022/02/15/gitToCodding/1.jpg" class title="这是一个新的博客的图片的说明">
<p style="text-indent:2em;">然后我们初始化coding项目的仓库：(导入外部仓库，添git项目地址,注意格式！！！)</p>
<img src="/2022/02/15/gitToCodding/10.jpg" class title="这是一个新的博客的图片的说明">
<p style="text-indent:2em;">此时，git代码已经初始化到coding中了！</p>
<img src="/2022/02/15/gitToCodding/11.jpg" class title="这是一个新的博客的图片的说明">
<p>⑥改coding默认分支</p>
<p style="text-indent:2em;">此时我们发现，分支有两个，我们要修改main为默认分支：</p>
<img src="/2022/02/15/gitToCodding/12.jpg" class title="这是一个新的博客的图片的说明">
<p style="text-indent:2em;">点分支设置，保存。此时关于coding的配置已经全部完成了，静态网页等功能不需要也找不到了：</p>
<img src="/2022/02/15/gitToCodding/13.jpg" class title="这是一个新的博客的图片的说明">
<p>⑦改git默认分支</p>
<p style="text-indent:2em;">这时，我们就可以通过hexo clean && hexo g && hexo d 来修改与部署了。但我发现，即使根目录_config.yml已配置分支为main，但coding上还是合并到了master分支。通过git日志也可以看到。</p>
<img src="/2022/02/15/gitToCodding/14.jpg" class title="这是一个新的博客的图片的说明">
<p style="text-indent:2em;">我们需要让hexo d执行时，获取到main分支而不是master，找来找去没找到方法。最后找到\node_modules\hexo-deployer-git\lib\parse_config.js，暴力替换分支名称，问题解决！</p>
<img src="/2022/02/15/gitToCodding/18.jpg" class title="这是一个新的博客的图片的说明">
<p>⑧结果验证</p>
<p style="text-indent:2em;">此时执行hexo clean && hexo g && hexo d，观察coding的main分支中的代码，是否有新加文件。若配置无修改，可以查看下分支的更新时间。</p>
<img src="/2022/02/15/gitToCodding/16.jpg" class title="这是一个新的博客的图片的说明">
<img src="/2022/02/15/gitToCodding/17.jpg" class title="这是一个新的博客的图片的说明">
<p style="text-indent:2em;">此时就大功告成了，如果远程网站没更新，可能是有延迟，耐心等待即可。(我没耐心，hexo d了多次，终于刷出来了，各位小伙伴不必慌)。</p>

</p">]]></content>
      <categories>
        <category>搭建</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title>如何去除hexo底部强力驱动标记</title>
    <url>/2022/02/15/deleteHexoLogo/</url>
    <content><![CDATA[<p style="text-indent:2em;">Hexo博客搭建好后,底部的"由 Hexo & NexT.Mist 强力驱动"的字样属实让人头疼。虽然我爱你,但把你名字纹在大腿大可不必！</p>

<p>方法一：</p>
<p style="text-indent:2em;">找到/Blog/themes/next/_config.yml，设置powered为false即可！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># Powered <span class="keyword">by</span> Hexo <span class="operator">&amp;</span> NexT</span><br><span class="line">powered: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<p style="text-indent:2em;">找到Blog\themes\next\layout\_partials下的footer.swig,定位51行,删除footer.powered url这行即可！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&#123;<span class="operator">%</span><span class="operator">-</span> if theme.footer.powered <span class="operator">%</span>&#125;</span><br><span class="line">  <span class="operator">&lt;</span>div class<span class="operator">=</span>&quot;powered-by&quot;<span class="operator">&gt;</span></span><br><span class="line">    &#123;<span class="operator">%</span><span class="operator">-</span> <span class="keyword">set</span> next_site <span class="operator">=</span> <span class="string">&#x27;https://theme-next.org&#x27;</span> <span class="operator">%</span>&#125;</span><br><span class="line">    &#123;<span class="operator">%</span><span class="operator">-</span> if theme.scheme <span class="operator">!=</span><span class="operator">=</span> <span class="string">&#x27;Gemini&#x27;</span> <span class="operator">%</span>&#125;</span><br><span class="line">      &#123;<span class="operator">%</span><span class="operator">-</span> <span class="keyword">set</span> next_site <span class="operator">=</span> <span class="string">&#x27;https://&#x27;</span> <span class="operator">+</span> theme.scheme <span class="operator">|</span> lower <span class="operator">+</span> <span class="string">&#x27;.theme-next.org&#x27;</span> <span class="operator">%</span>&#125;</span><br><span class="line">    &#123;<span class="operator">%</span><span class="operator">-</span> endif <span class="operator">%</span>&#125;</span><br><span class="line">    将此行删除：&#123;&#123;<span class="operator">-</span> __(<span class="string">&#x27;footer.powered&#x27;</span>, next_url(<span class="string">&#x27;https://hexo.io&#x27;</span>, <span class="string">&#x27;Hexo&#x27;</span>, &#123;class: <span class="string">&#x27;theme-link&#x27;</span>&#125;) <span class="operator">+</span> <span class="string">&#x27; &amp; &#x27;</span> <span class="operator">+</span> next_url(next_site, <span class="string">&#x27;NexT.&#x27;</span> <span class="operator">+</span> theme.scheme, &#123;class: <span class="string">&#x27;theme-link&#x27;</span>&#125;)) &#125;&#125;</span><br><span class="line">  <span class="operator">&lt;</span><span class="operator">/</span>div<span class="operator">&gt;</span></span><br><span class="line">&#123;<span class="operator">%</span><span class="operator">-</span> endif <span class="operator">%</span>&#125;</span><br></pre></td></tr></table></figure>
    ]]></content>
      <categories>
        <category>trouble</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop进程异常检测重启</title>
    <url>/2022/02/09/hadoopRoot/</url>
    <content><![CDATA[<p style="text-indent:2em;">各位在搭建完Hadoop后，是不是会偶尔出现进程挂掉的情况呢？这里的进程指的是NameNode/DataNode/ResourceManager/NodeManager等。在排除搭建时有问题外，写一套自动检测重启的脚本，就非常有必要了。</p>
<p style="text-indent:2em;">这里介绍一个shell方法，每间隔60s检测一次，发现异常即重启，并将重启记录写入MySQL，便于后续分析</p>
<p style="text-indent:2em;">首先要在MySQL的bigdata库建表:</p>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> bigdata.hadoop_process_log (</span><br><span class="line">	`node` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;节点&#x27;</span>,</span><br><span class="line">	`typeName` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;进程类型&#x27;</span>,</span><br><span class="line">	`logtime` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;大数据hadoop进程重启记录表&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>脚本如下：<BR></BR></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># 功能：检测Hadoop进程</span></span><br><span class="line"><span class="comment"># Create：hst</span></span><br><span class="line"><span class="comment"># Time：2022-01-25 14:50:00</span></span><br><span class="line"><span class="comment"># Last Modify Developer：husongtao</span></span><br><span class="line"><span class="comment"># Last Modify Time：2022-01-25 14:50:00</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">rebootYarnFlag=0</span><br><span class="line">rebootHdfsFlag=0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法1：检测hadoop进程</span></span><br><span class="line"><span class="function"><span class="title">Fn_CheckHdp</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">	ssh -p 52001 <span class="variable">$1</span> <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/bin/jps|egrep -w <span class="variable">$2</span>&quot;</span> &gt; /dev/null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法2：重启hadoop进程</span></span><br><span class="line"><span class="comment">#为调用方便，ip端口写死在里面，需手动修改</span></span><br><span class="line"><span class="function"><span class="title">Fn_RebootHdp</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">	<span class="string">&quot;yarn&quot;</span>)</span><br><span class="line">	ssh -p 52001 hadoop3-215 <span class="string">&quot;sh <span class="variable">$HADOOP_HOME</span>/sbin/stop-yarn.sh; sh <span class="variable">$HADOOP_HOME</span>/sbin/start-yarn.sh&quot;</span>  &gt; /dev/null</span><br><span class="line">	rebootYarnFlag=1</span><br><span class="line">	;;</span><br><span class="line">	<span class="string">&quot;hdfs&quot;</span>)</span><br><span class="line">	ssh -p 52001 hadoop3-215 <span class="string">&quot;sh <span class="variable">$HADOOP_HOME</span>/sbin/stop-dfs.sh;sh <span class="variable">$HADOOP_HOME</span>/sbin/start-dfs.sh&quot;</span>   &gt; /dev/null</span><br><span class="line">	rebootHdfsFlag=1</span><br><span class="line">	;;</span><br><span class="line">	*)</span><br><span class="line">	<span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法3：hadoop进程失败记录写入MySQL</span></span><br><span class="line"><span class="comment">#为调用方便，ip端口用户密码 写死在里面，需手动修改</span></span><br><span class="line"><span class="function"><span class="title">Fn_LoadHdpLog</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">	sql=<span class="string">&quot;insert into hadoop_process_log(node,typename) values(\&quot;<span class="variable">$1</span>\&quot;,\&quot;<span class="variable">$2</span>\&quot;)&quot;</span></span><br><span class="line">	<span class="comment">#echo &quot;$sql&quot;</span></span><br><span class="line">	mysql -hhadoop3-217 -uroot -p111111 -P23306 bigdata -e <span class="string">&quot;<span class="variable">$sql</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#=================== 检查ResourceManager、NameNode服务器 ===================</span></span><br><span class="line">	<span class="comment">#1.检测 ResourceManager 进程</span></span><br><span class="line">	Fn_CheckHdp hadoop3-215 ResourceManager</span><br><span class="line">	<span class="keyword">if</span> [ 0 -ne $? ]</span><br><span class="line">	<span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;ResourceManager异常,即将重启YARN进程&quot;</span></span><br><span class="line">		Fn_RebootHdp yarn</span><br><span class="line">		Fn_LoadHdpLog hadoop3-215 ResourceManager</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#2.检测 NameNode 进程</span></span><br><span class="line">	Fn_CheckHdp hadoop3-215 NameNode</span><br><span class="line">	<span class="keyword">if</span> [ 0 -ne $? ]</span><br><span class="line">	<span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;NameNode异常,即将重启HDFS进程&quot;</span></span><br><span class="line">		Fn_RebootHdp hdfs</span><br><span class="line">		Fn_LoadHdpLog hadoop3-215 NameNode</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">#=================== 检查其他服务器 ===================	</span></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> hadoop3-213 hadoop3-214 hadoop3-215  hadoop3-216 hadoop3-217 hadoop3-218 hadoop3-219</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span> ====================    <span class="variable">$host</span>    ====================</span><br><span class="line"></span><br><span class="line">	<span class="comment">##1.检测 NodeManager 进程</span></span><br><span class="line">	Fn_CheckHdp <span class="variable">$host</span> NodeManager</span><br><span class="line">	<span class="keyword">if</span> [ 0 -ne $? ] &amp;&amp; [ <span class="variable">$rebootYarnFlag</span> -eq 0 ]</span><br><span class="line">	<span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;NodeManager异常,即将重启yarn进程&quot;</span></span><br><span class="line">		Fn_RebootHdp yarn</span><br><span class="line">		Fn_LoadHdpLog <span class="variable">$host</span> NodeManager</span><br><span class="line">	<span class="keyword">fi</span>	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">##2.检测 DataNode 进程</span></span><br><span class="line">	Fn_CheckHdp <span class="variable">$host</span> DataNode</span><br><span class="line">	<span class="keyword">if</span> [ 0 -ne $? ] &amp;&amp; [ <span class="variable">$rebootHdfsFlag</span> -eq 0 ]</span><br><span class="line">	<span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;DataNode异常,即将重启HDFS进程&quot;</span></span><br><span class="line">		Fn_RebootHdp hdfs</span><br><span class="line">		Fn_LoadHdpLog <span class="variable">$host</span> DataNode</span><br><span class="line">	<span class="keyword">fi</span>	</span><br><span class="line">	</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hadoop进程检测完毕！&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sleep</span> 60</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>各位小伙伴记得修改哦，不要把主机端口等参数弄错了！最后后台运行就可以了，日志表如下图：<BR> </BR></p>
<img src="/2022/02/09/hadoopRoot/1.png" class title="这是一个新的博客的图片的说明">
]]></content>
      <categories>
        <category>大数据</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop单节点磁盘突然占满怎么处理</title>
    <url>/2022/02/17/hadoop%E5%8D%95%E8%8A%82%E7%82%B9%E7%A3%81%E7%9B%98%E7%AA%81%E7%84%B6%E5%8D%A0%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p style="text-indent:2em;">如果是单个node磁盘被占满,可以排除数据暴增的情况。</p>
<p style="text-indent:2em;">那么可能存在一个异常进程，一直在写入磁盘没有被释放。查看已删除空间却没有释放的进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof|grep delete</span><br></pre></td></tr></table></figure>
<p style="text-indent:2em;">观察这些异常进程。我的问题是Azkaban任务一直Running,进行手动kill导致。直接将进程kill掉：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof|grep delete|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="built_in">kill</span> -9</span><br></pre></td></tr></table></figure>

<p style="text-indent:2em;">等待一分钟,若磁盘无明显改善,试试重启hdfs与yarn。当hadoop运行过久,也会出现无法stop与磁盘异常的情况。</p>

<p style="text-indent:2em;">如果问题仍未解决,可能是hadoop外其他文件太大,找到df -h 100%所指向的路径,进入路径执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -sh * </span><br></pre></td></tr></table></figure>
<p style="text-indent:2em;">看看哪些文件过大，进行删除或转移即可。</p>
<p style="text-indent:2em;">还有一种可能是hadoop分配不均衡，这种情况与网络带宽有关,需要进行重均衡：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置带宽：</span></span><br><span class="line">	hdfs dfsadmin -setBalancerBandwidth 20m</span><br><span class="line"></span><br><span class="line"><span class="comment">#重平衡(调整磁盘使用率偏差值)：</span></span><br><span class="line">sh <span class="variable">$HADOOP_HOME</span>/bin/start-balancer.sh –t 10%</span><br></pre></td></tr></table></figure>
<p style="text-indent:2em;">该命令为后台进程,不影响当前namenode与数据完整性的前提下,对数据进行重新分配,当节点间使用率差异在10%以内时,hadoop认为达到平衡。该任务一般设置夜间执行,可以设置每日晚间执行一次。</p>
<p style="text-indent:2em;">如果此文章有用,就动动小手点个赞吧！</p>










]]></content>
      <categories>
        <category>trouble</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>hive存储过程HplSQL使用示例</title>
    <url>/2022/04/18/hive%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8BHplSQL%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<p style="text-indent:2em;">在Hive开发中,要实现全面的 ETL、报告、分析和数据挖掘流程，不仅需要 MapReduce、Spark 或 Tez 等分布式处理引擎，
还需要一种表达全面业务规则的方法。比如可能存在满足某个条件再执行的脚本,虽然Azkaban调度中可以实现,但并不灵活,这时HplSQL就派上用场了！</p>

<p style="text-indent:2em;">官网：http://www.hplsql.org/download</p>
<p style="text-indent:2em;">配置：https://www.cnblogs.com/guotianqi/p/8041636.html</p>
<p style="text-indent:2em;">HPL/SQL尽量支持所有广泛使用的过程语言的语法。您无需从头开始学习新的程序语言。这有助于开发新代码以及将现有代码库迁移到Hadoop。
虽然官网是这么描述的,但实际使用发现坑也很多,比如sql文中嵌入变量。下面是我的使用示例,包含动态传参、流程控制、变量定义赋值等。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> controller(</span><br><span class="line"><span class="comment">---------------------------   后推背包礼物-&gt;抽取   ----------------------------</span></span><br><span class="line"><span class="comment">-- 创建者：呼松涛                                                             </span></span><br><span class="line"><span class="comment">-- 创建时间：20211018                                                         </span></span><br><span class="line"><span class="comment">-- 上次修改：20211118                                                         </span></span><br><span class="line"><span class="comment">-- 目标表：dws_fin_goods_sna_d、dws_fin_user_goods_sna_d              		  </span></span><br><span class="line"><span class="comment">-- 对应存储过程：usp_auto_userGoods                                 		  </span></span><br><span class="line"><span class="comment">-- 备注：该作业存在IF判断，故使用存储过程。                                            </span></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------</span></span><br><span class="line">	<span class="variable">@engine</span> string</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> var_date1 <span class="type">INT</span>,var_date2 <span class="type">INT</span>,var_date3 <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SELECT</span> var_date1 <span class="operator">=</span> NVL(<span class="built_in">MAX</span>(dateKey),<span class="number">0</span>) <span class="keyword">FROM</span>  mht.dwd_fin_user_package_sna_d; </span><br><span class="line"><span class="keyword">SELECT</span> var_date2 <span class="operator">=</span> NVL(default.fn_datekey_add(var_date1,<span class="number">1</span>),<span class="number">0</span>);               </span><br><span class="line"><span class="keyword">SELECT</span> var_date3 <span class="operator">=</span> NVL(<span class="built_in">MAX</span>(dateKey),<span class="number">0</span>) <span class="keyword">FROM</span> mht.dws_fin_user_goods_sna_d;    </span><br><span class="line"></span><br><span class="line">print <span class="string">&#x27;变量var_date1 =&#x27;</span> <span class="operator">||</span> var_date1 <span class="operator">||</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">print <span class="string">&#x27;变量var_date2 =&#x27;</span> <span class="operator">||</span> var_date2 <span class="operator">||</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">print <span class="string">&#x27;变量var_date3 =&#x27;</span> <span class="operator">||</span> var_date3 <span class="operator">||</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IF var_date3 <span class="operator">&lt;</span> var_date1 <span class="keyword">THEN</span></span><br><span class="line">print <span class="string">&#x27;满足执行条件：var_date3 &lt; var_date1 ，即将执行hql脚本！&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> sqlA STRING;</span><br><span class="line">sqlA<span class="operator">=</span><span class="string">&#x27;set hive.execution.engine=&#x27;</span> <span class="operator">||</span> <span class="variable">@engine</span> <span class="operator">||</span> <span class="string">&#x27;;&#x27;</span> ;</span><br><span class="line">print sqlA;</span><br><span class="line">hive <span class="operator">-</span>e sqlA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> sqlB STRING;</span><br><span class="line">sqlB<span class="operator">=</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">	drop table if exists tmp.tmp_mht_dws_snap_d_userGoods_tbl_a;</span></span><br><span class="line"><span class="string">	drop table if exists tmp.tmp_mht_dws_snap_d_userGoods_tbl_b;</span></span><br><span class="line"><span class="string">	drop table if exists tmp.tmp_mht_dws_snap_d_userGoods_tbl_c;</span></span><br><span class="line"><span class="string">	drop table if exists tmp.tmp_mht_dws_snap_d_userGoods_tbl_d;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	create table tmp.tmp_mht_dws_snap_d_userGoods_tbl_a AS </span></span><br><span class="line"><span class="string">		SELECT  *</span></span><br><span class="line"><span class="string">		FROM    mht.dws_fin_user_goods_sna_d</span></span><br><span class="line"><span class="string">		WHERE   endKey = &#x27;</span> <span class="operator">||</span> var_date1 <span class="operator">||</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">	;</span></span><br><span class="line"><span class="string">	create table tmp.tmp_mht_dws_snap_d_userGoods_tbl_b AS</span></span><br><span class="line"><span class="string">		SELECT  *</span></span><br><span class="line"><span class="string">		FROM  mht.dwd_fin_user_package_sna_d</span></span><br><span class="line"><span class="string">		WHERE dt = &#x27;</span> <span class="operator">||</span> var_date1 <span class="operator">||</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">	;			</span></span><br><span class="line"><span class="string">	create table tmp.tmp_mht_dws_snap_d_userGoods_tbl_c AS</span></span><br><span class="line"><span class="string">		SELECT  userId,</span></span><br><span class="line"><span class="string">				goodsId,</span></span><br><span class="line"><span class="string">				SUM(amount) AS goodsCount,</span></span><br><span class="line"><span class="string">				SUM(CAST(NVL(amount, 0) AS BIGINT)</span></span><br><span class="line"><span class="string">					* CAST(NVL(goodsPrice, 0) AS BIGINT)) AS totlePrice</span></span><br><span class="line"><span class="string">		FROM tmp.tmp_mht_dws_snap_d_userGoods_tbl_b</span></span><br><span class="line"><span class="string">		GROUP BY userId,</span></span><br><span class="line"><span class="string">				goodsId</span></span><br><span class="line"><span class="string">	;</span></span><br><span class="line"><span class="string">	create table tmp.tmp_mht_dws_snap_d_userGoods_tbl_d AS</span></span><br><span class="line"><span class="string">		SELECT  a.*</span></span><br><span class="line"><span class="string">		FROM    tmp.tmp_mht_dws_snap_d_userGoods_tbl_a a</span></span><br><span class="line"><span class="string">				INNER JOIN tmp.tmp_mht_dws_snap_d_userGoods_tbl_c c ON c.userId = a.userId</span></span><br><span class="line"><span class="string">								AND c.goodsId = a.goodsId</span></span><br><span class="line"><span class="string">		WHERE   a.goodsCount = c.goodsCount</span></span><br><span class="line"><span class="string">				AND a.totlePrice = c.totlePrice</span></span><br><span class="line"><span class="string">	;&#x27;</span></span><br><span class="line">	</span><br><span class="line">print sqlB;</span><br><span class="line">hive <span class="operator">-</span>e sqlB;		</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="keyword">DECLARE</span> sqlB1 STRING;</span><br><span class="line">sqlB1<span class="operator">=</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">	--1.存在且一样(只更endkey)</span></span><br><span class="line"><span class="string">	INSERT OVERWRITE TABLE mht.dws_fin_user_goods_sna_d</span></span><br><span class="line"><span class="string">	SELECT </span></span><br><span class="line"><span class="string">		b.dateKey,</span></span><br><span class="line"><span class="string">		b.userId,</span></span><br><span class="line"><span class="string">		b.goodsId,</span></span><br><span class="line"><span class="string">		b.goodsCount,</span></span><br><span class="line"><span class="string">		b.totlePrice,</span></span><br><span class="line"><span class="string">		IF(d.userId IS NOT NULL,&#x27;</span> <span class="operator">||</span> var_date2 <span class="operator">||</span> <span class="string">&#x27;,b.endKey) AS endKey,</span></span><br><span class="line"><span class="string">		b.createTime,</span></span><br><span class="line"><span class="string">		b.updateTime</span></span><br><span class="line"><span class="string">	FROM  mht.dws_fin_user_goods_sna_d b</span></span><br><span class="line"><span class="string">	LEFT JOIN tmp.tmp_mht_dws_snap_d_userGoods_tbl_d d</span></span><br><span class="line"><span class="string">	ON d.userId = b.userId AND d.goodsId = b.goodsId AND b.endKey = &#x27;</span> <span class="operator">||</span> var_date1 <span class="operator">||</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">	;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	--2.存在不一样(插入)</span></span><br><span class="line"><span class="string">	INSERT INTO TABLE mht.dws_fin_user_goods_sna_d</span></span><br><span class="line"><span class="string">	SELECT  </span></span><br><span class="line"><span class="string">		&#x27;</span> <span class="operator">||</span> var_date1 <span class="operator">||</span> <span class="string">&#x27; AS dateKey,</span></span><br><span class="line"><span class="string">		b.userId,</span></span><br><span class="line"><span class="string">		b.goodsId,</span></span><br><span class="line"><span class="string">		b.goodsCount,</span></span><br><span class="line"><span class="string">		b.totlePrice,</span></span><br><span class="line"><span class="string">		&#x27;</span> <span class="operator">||</span> var_date2 <span class="operator">||</span> <span class="string">&#x27; AS endKey,</span></span><br><span class="line"><span class="string">		CURRENT_TIMESTAMP() AS createTime,</span></span><br><span class="line"><span class="string">		CURRENT_TIMESTAMP() AS updateTime</span></span><br><span class="line"><span class="string">	FROM tmp.tmp_mht_dws_snap_d_userGoods_tbl_a a</span></span><br><span class="line"><span class="string">	JOIN tmp.tmp_mht_dws_snap_d_userGoods_tbl_c b </span></span><br><span class="line"><span class="string">		ON b.userId = a.userId AND b.goodsId = a.goodsId</span></span><br><span class="line"><span class="string">	WHERE   a.goodsCount &lt;&gt; b.goodsCount</span></span><br><span class="line"><span class="string">			AND a.totlePrice &lt;&gt; b.totlePrice</span></span><br><span class="line"><span class="string">	;</span></span><br><span class="line"><span class="string">				</span></span><br><span class="line"><span class="string">	--3.不存在(插入)</span></span><br><span class="line"><span class="string">	INSERT INTO TABLE mht.dws_fin_user_goods_sna_d</span></span><br><span class="line"><span class="string">	SELECT  </span></span><br><span class="line"><span class="string">		&#x27;</span> <span class="operator">||</span> var_date1 <span class="operator">||</span> <span class="string">&#x27; AS dateKey,</span></span><br><span class="line"><span class="string">		a.userId,</span></span><br><span class="line"><span class="string">		a.goodsId,</span></span><br><span class="line"><span class="string">		a.goodsCount,</span></span><br><span class="line"><span class="string">		a.totlePrice,</span></span><br><span class="line"><span class="string">		&#x27;</span> <span class="operator">||</span> var_date2 <span class="operator">||</span> <span class="string">&#x27; AS endKey,</span></span><br><span class="line"><span class="string">		CURRENT_TIMESTAMP() AS createTime,</span></span><br><span class="line"><span class="string">		CURRENT_TIMESTAMP() AS updateTime</span></span><br><span class="line"><span class="string">	FROM tmp.tmp_mht_dws_snap_d_userGoods_tbl_c a</span></span><br><span class="line"><span class="string">	WHERE  NOT EXISTS </span></span><br><span class="line"><span class="string">	( SELECT 1</span></span><br><span class="line"><span class="string">		FROM   tmp.tmp_mht_dws_snap_d_userGoods_tbl_a b</span></span><br><span class="line"><span class="string">		WHERE  b.userId = a.userId</span></span><br><span class="line"><span class="string">			AND b.goodsId = a.goodsId )</span></span><br><span class="line"><span class="string">	;&#x27;</span></span><br><span class="line">	</span><br><span class="line">print sqlB1;</span><br><span class="line">hive <span class="operator">-</span>e sqlB1;	</span><br><span class="line">				</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> sqlC STRING;	</span><br><span class="line">sqlC<span class="operator">=</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">	--平台背包期初</span></span><br><span class="line"><span class="string">	INSERT OVERWRITE TABLE mht.dws_fin_goods_sna_d partition(dt)</span></span><br><span class="line"><span class="string">	SELECT  </span></span><br><span class="line"><span class="string">		&#x27;</span> <span class="operator">||</span> var_date1 <span class="operator">||</span> <span class="string">&#x27; AS dateKey,</span></span><br><span class="line"><span class="string">		a.goodsId,</span></span><br><span class="line"><span class="string">		SUM(NVL(a.goodsCount, 0)),                              --总个数</span></span><br><span class="line"><span class="string">		SUM(NVL(a.totlePrice, 0)),                              --总金额</span></span><br><span class="line"><span class="string">		------------------------------------------------</span></span><br><span class="line"><span class="string">		SUM(IF(a.userId IN ( 10326832, 10326836 ), 0, NVL(a.goodsCount,</span></span><br><span class="line"><span class="string">									0))),                     --排除系统账号总个数</span></span><br><span class="line"><span class="string">		SUM(IF(a.userId IN ( 10326832, 10326836 ), 0, NVL(a.totlePrice,</span></span><br><span class="line"><span class="string">									0))),                     --排除系统账号总金额</span></span><br><span class="line"><span class="string">		------------------------------------------------</span></span><br><span class="line"><span class="string">		SUM(IF(a.userId IN ( 10326832, 10326836 ), NVL(a.goodsCount,</span></span><br><span class="line"><span class="string">									0), 0)),                   --系统账号总个数</span></span><br><span class="line"><span class="string">		SUM(IF(a.userId IN ( 10326832, 10326836 ), NVL(a.totlePrice,</span></span><br><span class="line"><span class="string">									0), 0)),	              --系统账号总金额</span></span><br><span class="line"><span class="string">		CURRENT_TIMESTAMP() AS createTime,</span></span><br><span class="line"><span class="string">		&#x27;</span> <span class="operator">||</span> var_date1 <span class="operator">||</span> <span class="string">&#x27; AS dt</span></span><br><span class="line"><span class="string">	FROM  mht.dws_fin_user_goods_sna_d a </span></span><br><span class="line"><span class="string">	WHERE   a.dateKey &lt;= &#x27;</span> <span class="operator">||</span> var_date1 <span class="operator">||</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">			AND a.endKey &gt; &#x27;</span> <span class="operator">||</span> var_date1 <span class="operator">||</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">	GROUP BY a.goodsId;&#x27;</span></span><br><span class="line"></span><br><span class="line">print sqlC;</span><br><span class="line">hive <span class="operator">-</span>e sqlC;	</span><br><span class="line">			</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">	print <span class="string">&#x27;不满足执行条件：var_date3 &lt; var_date1 ，即将退出！&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p style="text-indent:2em;">调用时命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/hplsql-0.3.31/hplsql -f /usr/local/hive-2.3.9/workspace/sqlText/hpl/proc_user_goods_sna.sql -main controller -d @engine=tez</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>大数据</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Next为首页文章添加边框阴影[绝对有效]</title>
    <url>/2022/02/17/next%E4%B8%BA%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E8%BE%B9%E6%A1%86%E9%98%B4%E5%BD%B1-%E7%BB%9D%E5%AF%B9%E6%9C%89%E6%95%88/</url>
    <content><![CDATA[<p style="text-indent:2em;">别人的博客首页文章有边框和阴影,效果不错,毕竟不加边框看着太low了。但是网上的方法都没效果,自己也不熟悉hexo,真让人头疼！</p>
<p style="text-indent:2em;">突发异想，会不会是大佬们在写博客时，故意挖个坑呢？</p>
<p style="text-indent:2em;">我比较信任的方法是这样的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">找到Blog\themes\next\source\css\_common\components\post\post.styl，定位<span class="string">&#x27;motion.transition.post_block&#x27;</span></span><br><span class="line">将</span><br><span class="line">.use<span class="operator">-</span>motion &#123;</span><br><span class="line">  if (hexo<span class="operator">-</span>config(<span class="string">&#x27;motion.transition.post_block&#x27;</span>)) &#123;</span><br><span class="line">    .post<span class="operator">-</span>block, .pagination, .comments &#123;</span><br><span class="line">      opacity: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">替换为：</span><br><span class="line">.use<span class="operator">-</span>motion &#123;</span><br><span class="line">  if (hexo<span class="operator">-</span>config(<span class="string">&#x27;motion.transition.post_block&#x27;</span>)) &#123;</span><br><span class="line">    .post<span class="operator">-</span>block&#123;</span><br><span class="line">	 opacity: <span class="number">0</span>;</span><br><span class="line">     margin<span class="operator">-</span>top: <span class="number">60</span>px;</span><br><span class="line">     margin<span class="operator">-</span>bottom: <span class="number">60</span>px;</span><br><span class="line">     padding: <span class="number">25</span>px;</span><br><span class="line">     <span class="operator">-</span>webkit<span class="operator">-</span>box<span class="operator">-</span>shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span>);</span><br><span class="line">     <span class="operator">-</span>moz<span class="operator">-</span>box<span class="operator">-</span>shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">.5</span>);</span><br><span class="line">	&#125; .pagination, .comments &#123;</span><br><span class="line">      opacity: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p style="text-indent:2em;">但是亲测无效，最后盯了半天，发现个bug:</p>
<img src="/2022/02/17/next%E4%B8%BA%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E8%BE%B9%E6%A1%86%E9%98%B4%E5%BD%B1-%E7%BB%9D%E5%AF%B9%E6%9C%89%E6%95%88/1.jpg" class title="这是一个新的博客的图片的说明">
<p style="text-indent:2em;">what?这个点是干嘛的？我再菜也别蒙我啊！最后一个参数指的透明度, 1为100% 不透明,0为完全透明,此处我们改为1</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">.use<span class="operator">-</span>motion &#123;</span><br><span class="line">  if (hexo<span class="operator">-</span>config(<span class="string">&#x27;motion.transition.post_block&#x27;</span>)) &#123;</span><br><span class="line">    .post<span class="operator">-</span>block&#123;</span><br><span class="line">	 opacity: <span class="number">0</span>;</span><br><span class="line">     margin<span class="operator">-</span>top: <span class="number">60</span>px;</span><br><span class="line">     margin<span class="operator">-</span>bottom: <span class="number">60</span>px;</span><br><span class="line">     padding: <span class="number">25</span>px;</span><br><span class="line">     <span class="operator">-</span>webkit<span class="operator">-</span>box<span class="operator">-</span>shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">41</span>,<span class="number">36</span>,<span class="number">33</span>, <span class="number">1</span>); <span class="operator">/</span><span class="operator">/</span>我喜欢的象牙黑,白背景效果更佳！</span><br><span class="line">     <span class="operator">-</span>moz<span class="operator">-</span>box<span class="operator">-</span>shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">41</span>,<span class="number">36</span>,<span class="number">33</span>, <span class="number">1</span>);</span><br><span class="line">	&#125; .pagination, .comments &#123;</span><br><span class="line">      opacity: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p style="text-indent:2em;">完美解决！事实证明,细心永远最重要！不知道网上无脑复制粘贴别人文章的博主，不觉得惭愧吗？！！！</p>




]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlserver使用语法整理</title>
    <url>/2022/04/21/sqlserver%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>参考资料：<a href="https://www.it610.com/article/1291207212026372096.html">https://www.it610.com/article/1291207212026372096.html</a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>一、变量</p>
<p>①变量定义<br>@@开头：全局变量(系统定义，不可修改)<br>@开头：局部变量(用户定义，生命周期在批处理范围内)<br>②变量赋值<br>declare定义,set和select赋值(set用于赋值与表数据无关的场景,否则使用select)<br>③变量输出<br>print或select</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>二、运算符</p>
<p>和其他MySQL大同小异</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>三、逻辑运算符</p>
<p>all（所有）、and(与）、any（任意一个）、<br>between(两者之间)、exists(存在)、in(在范围内)、<br>like(匹配)、not(非)、or(或)、some(任意一个)<br>一元运算符+（正）、-（负）、~（取反）</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>四、SQL语法</p>
<p>①不同点<br>top 1 字段  ：取第一条<br>as 用户名   ：中文别名可以不加引号<br>‘a’+’b’     ：字符串拼接</p>
<p>获取上月月份↓<br>select CONVERT(NVARCHAR(6), DATEADD(MONTH, -1,LTRIM(202105)+ ‘01’), 112)    –&gt;  202104<br>可通过设置字符串长度实现裁剪 ↓<br>select CONVERT(VARCHAR(19),GETDATE(),112)    –&gt;  20210605<br>select CONVERT(VARCHAR(10),GETDATE(),126)    –&gt;  2021-06-08<br>select CONVERT(VARCHAR(19),GETDATE(),120)    –&gt;  2021-06-08 14:21:33<br>select CONVERT(VARCHAR(19),GETDATE(),126)    –&gt;  2021-06-08T14:23:40<br>select CONVERT(VARCHAR(25),GETDATE(),126)    –&gt;  2021-06-08T14:25:52.620<br>select CONVERT(VARCHAR(25),GETDATE(),121)    –&gt;  2021-06-08 14:24:56.353</p>
<p>②临时表<br>select 字段 INTO  #tmp2  [IN externaldatabase]：创建表的备份复件[或插入新表]<br>#tmp2 本地临时表,只对当前用户连接可见<br>##tmp2 全局临时表,对任何用户可见</p>
<p>③存储过程<br>exec 过程名 ：执行存储过程</p>
<p>④创建索引<br>CREATE INDEX idx_temp ON #t_family_base_level_transform(family_id,f_id);</p>
<p>⑤索引分类<br>(1) 唯一索引(UNIQUE)：不允许两行具有相同的索引值（创建了唯一约束，系统将自动创建唯一索引）</p>
<p>在表上创建唯一索引。唯一索引是不允许其中任意两行具有相同索引值的索引。</p>
<p>SQL Server 2005 Compact Edition (SQL Server Compact Edition) 在创建索引后将检查是否存在重复的值（如果数据已存在），并在每次使用 INSERT 或 UPDATE 语句添加数据时执行该检查操作。必须先消除重复值，然后才可对列创建唯一索引。如果存在重复的键值，则将取消 CREATE INDEX 语句并返回错误。只能对定义为 NOT NULL 的列创建唯一索引。</p>
<p>如果存在唯一索引，则可能生成重复键值的 UPDATE 或 INSERT 语句将回滚，且 SQL Server Compact Edition 返回错误。即使 UPDATE 或 INSERT 语句更改许多行，但只要存在一个重复，上面这一点也将成立。</p>
<p>(2) 主键索引：主键索引要求主键中的每个值是唯一的，（创建主键自动创建主键索引）<br>(3) 聚集索引(CLUSTERED)：表中各行的物理顺序与键值的逻辑（索引）顺序相同，表中只能包含一个聚集索引，主键列默认为聚集索引<br>(4) 非聚集索引(NONCLUSTERED)：表中各行的物理顺序与键值的逻辑（索引）顺序不匹配，表中可以有249个非聚集索引<br>3.创建索引的标准：用语频繁搜索的列；用语对数据进行排序的列<br>注意：如果表中仅有几行，或列中只包含几个不同的值，不推荐创建索引，因为SQL Server 在小型表中用索引搜索数据所花的时间比逐行搜索更长。<br>————————————————<br>版权声明：本文为CSDN博主「乐在‘奇’中」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_42689281/article/details/86974809">https://blog.csdn.net/qq_42689281/article/details/86974809</a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>五、触发器</p>
<p>①触发器的定义<br>触发器（Trigger）是针对某个表或视图所编写的特殊存储过程，它不能被显式地调用，<br>而是当该表或视图中的数据发生添加INSERT、更新UPDATE或删除DELETE等事件时自动被执行。</p>
<p>②触发器的作用<br>主要作用是实现由主键和强制数据库间的引用完整性；<br>级联修改数据库中所有相关的表，自动触发其它与之相关的操作；<br>跟踪变化，撤销或回滚违法操作，防止非法修改数据；<br>返回自定义的错误消息，约束无法返回信息，而触发器可以；<br>触发器可以调用更多的存储过程；外键所不能保证的复杂的参照完整性和数据一致性</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>六、优化</p>
<p>①WITH (NOLOCK):<br>     作用： 改善大量查询的环境中数据集被lock的现象，以改善查询性能(相当于读未提交的隔离级别)。<br>     缺陷： 可能会造成脏读(修改后又撤销,两次读结果不同)<br>            可能会造成不可重复读(读之后又被修改,两次读结果不同)<br>            可能会造成幻读(根据条件查一批数据,第一次查询后被修改了,造成两次数据条目不一致)<br>  nolock和with(nolock)的几个小区别：<br>1、SQL05中的同义词，只支持with(nolock);<br>2、with(nolock)的写法非常容易再指定索引。<br>3、跨服务器查询语句时不能用with (nolock) 只能用nolock，同一个服务器查询时 则with(nolock)和nolock都可以用</p>
<p>②SET NOCOUNT ON<br>     作用：不向客户端返回受影响的行数,减少了网络流量,可以显著提高性能。</p>
<p>文章参考：<a href="https://www.cnblogs.com/skyay/p/12558352.html">https://www.cnblogs.com/skyay/p/12558352.html</a></p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>SqlServer</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>SqlServer</tag>
      </tags>
  </entry>
  <entry>
    <title>windows更新后Navicat连不上sqlserver的解决办法</title>
    <url>/2022/01/18/windows%E6%9B%B4%E6%96%B0%E5%90%8ENavicat%E8%BF%9E%E4%B8%8D%E4%B8%8Asqlserver%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p style="text-indent:2em;">最近Window10一直提醒更新,历经数次失败,终于更新成功了。</p>
<p style="text-indent:2em;">但是我的Navicat Premium却连不上sqlserver了(Mysql正常),每次连接就报错：</p>
<img src="/2022/01/18/windows%E6%9B%B4%E6%96%B0%E5%90%8ENavicat%E8%BF%9E%E4%B8%8D%E4%B8%8Asqlserver%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/1.jpg" class title="这是一个新的博客的图片的说明">
<p style="text-indent:2em;">网上告诉我要重新安装,但未免过于麻烦,最后找到了方法。</p>

<p style="text-indent:2em;">1.编辑数据库连接,高级选项</p>
<img src="/2022/01/18/windows%E6%9B%B4%E6%96%B0%E5%90%8ENavicat%E8%BF%9E%E4%B8%8D%E4%B8%8Asqlserver%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/2.jpg" class title="这是一个新的博客的图片的说明">

<p style="text-indent:2em;">2.Navicat Client驱动程序,选你匹配的ODBC,测试连接</p>
<img src="/2022/01/18/windows%E6%9B%B4%E6%96%B0%E5%90%8ENavicat%E8%BF%9E%E4%B8%8D%E4%B8%8Asqlserver%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/3.jpg" class title="这是一个新的博客的图片的说明">

<p style="text-indent:2em;">测通后重新连接就没问题啦！</p>]]></content>
      <categories>
        <category>Navicat</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>sqoop使用笔记</title>
    <url>/2021/02/09/sqoopNote/</url>
    <content><![CDATA[<p>此文章记录个人使用sqoop遇到的问题及方法<br>(一)基础参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">①公共参数</span><br><span class="line">--connect 			指定MySQL的Url.</span><br><span class="line">--username 			指定MySQL用户名数据库密码</span><br><span class="line">--password 			指定MySQL数据库密码</span><br><span class="line">--num-mappers 			指定map的个数</span><br><span class="line">--null-non-string <span class="string">&#x27;\\N&#x27;</span> 	导入时保证NULL值一致性</span><br><span class="line">--null-string  <span class="string">&#x27;\\N&#x27;</span> 		导入时保证NULL值一致性</span><br><span class="line">--input-null-string <span class="string">&#x27;\\N&#x27;</span> 	导出时保证NULL值一致性</span><br><span class="line">--input-null-non-string <span class="string">&#x27;\\N&#x27;</span>   导出时保证NULL值一致性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">②MySQL导入HDFS的参数</span><br><span class="line">--table usertable		指定MySQL的表名</span><br><span class="line">--<span class="built_in">where</span> <span class="string">&quot;&quot;</span>           		指定MySQL表的过滤条件</span><br><span class="line">--query <span class="string">&#x27;and $CONDITIONS&#x27;</span>       指定MySQL表及过滤条件(不能和table一起用)</span><br><span class="line">--fields-terminated-by <span class="string">&#x27;&#x27;</span>       指定HDFS文件的字段分隔符</span><br><span class="line">--lines-terminated-by <span class="string">&#x27;&#x27;</span>	指定HDFS文件的换行符</span><br><span class="line">--delete-target-dir             若目标路径已存在即删除</span><br><span class="line">--split-by                      根据哪个字段来分片</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">③MySQL导入Hive表的参数</span><br><span class="line">--hive-import			设置导入目标为Hive表</span><br><span class="line">--table                         指定MySQL的表名</span><br><span class="line">--columns                       指定需筛选的字段</span><br><span class="line">--<span class="built_in">where</span> <span class="string">&quot;&quot;</span>           		指定MySQL表的过滤条件</span><br><span class="line">--hive-table         		指定目标Hive表</span><br><span class="line">--hive-partition-key            指定Hive分区字段</span><br><span class="line">--hive-partition-value          指定Hive某个分区</span><br><span class="line">--delete-target-dir             若目标路径已存在即删除</span><br><span class="line">--fields-terminated-by <span class="string">&#x27;&#x27;</span>       指定HDFS文件的字段分隔符</span><br><span class="line">--lines-terminated-by <span class="string">&#x27;&#x27;</span>	指定HDFS文件的换行符</span><br><span class="line">--hive-overwrite                覆盖模式</span><br><span class="line">--hive-drop-import-delims       把字符串中\n\r\01删除</span><br><span class="line">--hive-delims-replacement <span class="string">&#x27;&#x27;</span>    用空格替换特殊字符</span><br><span class="line">--create-hive-table             建表，如果表已经存在，该操作会报错！</span><br><span class="line">--map-column-hive		为配置的列覆盖从SQL类型到Hive类型的默认映射(<span class="built_in">id</span> = int格式)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">备注：</span><br><span class="line">	1.Hive需要手动建表，字段类型必须相对应，否则会出现<span class="literal">true</span>或<span class="literal">false</span>的值，导致数据不一致。</span><br><span class="line">	2.query和table不能一起用，否则有冲突时无法确定源表。</span><br><span class="line">	3.map-column-hive参数需要指定列及对应的类型，不如手动建表或写脚本。</span><br><span class="line">	4.bit布尔型导入时，1=<span class="literal">true</span> ,2=<span class="literal">false</span></span><br><span class="line">	5.原表主键为文本格式时：sqoop import <span class="string">&quot;-Dorg.apache.sqoop.splitter.allow_text_splitter=true&quot;</span></span><br><span class="line">	6.hive不支持mysql的binary类型</span><br></pre></td></tr></table></figure>

<p>(二)MySQL使用示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.导入数据示例</span></span><br><span class="line">sqoop import \</span><br><span class="line">--connect jdbc:mysql://aliyun5201314:3306/jianyeo2o \</span><br><span class="line">--username root \</span><br><span class="line">--password root \</span><br><span class="line">--table usertable \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--hive-import \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--fields-terminated-by <span class="string">&quot;\t&quot;</span> \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--hive-table rds_jianyeo2o.ods_usertable \</span><br><span class="line">--null-string  <span class="string">&#x27;\\N&#x27;</span> \</span><br><span class="line">--null-non-string <span class="string">&#x27;\\N&#x27;</span> \</span><br><span class="line">--<span class="built_in">where</span> <span class="string">&quot;createtime is not null&quot;</span> \</span><br><span class="line">--hive-drop-import-delims</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.导出数据示例</span></span><br><span class="line">sqoop <span class="built_in">export</span> </span><br><span class="line">--connect jdbc:mysql://520.13.14.9999:250/ads_we7 \</span><br><span class="line">--username root \</span><br><span class="line">--password root \</span><br><span class="line">--table ads_house_cust_first \</span><br><span class="line">--num-mappers 3 \</span><br><span class="line">--input-fields-terminated-by <span class="string">&#x27;\001&#x27;</span> \</span><br><span class="line">--export-dir /user/hive/warehouse/wxslb.db/ads_house_cust_first \</span><br><span class="line">--input-null-string <span class="string">&#x27;\\N&#x27;</span> \</span><br><span class="line">--input-null-non-string <span class="string">&#x27;\\N&#x27;</span> \</span><br><span class="line">--staging-table ads_house_cust_first_tmp \</span><br><span class="line">--clear-staging-table</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.无需建表直接导入</span></span><br><span class="line">sqoop import \</span><br><span class="line">--connect jdbc:mysql://520.13.14.9999:250/ods_o2oshop \</span><br><span class="line">--username root \</span><br><span class="line">--password root \</span><br><span class="line">--table iskyshop_goodscart \</span><br><span class="line">--num-mappers 50 \</span><br><span class="line">--hive-import \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--fields-terminated-by <span class="string">&quot;\t&quot;</span> \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--hive-table rds_iskyshop.ods_iskyshop_goodscart \</span><br><span class="line">--create-hive-table \</span><br><span class="line">--null-string  <span class="string">&#x27;\\N&#x27;</span> \</span><br><span class="line">--null-non-string <span class="string">&#x27;\\N&#x27;</span> \</span><br><span class="line">--hive-delims-replacement <span class="string">&#x27; &#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.导入时指定时区(避免报错java.lang.IllegalArgumentException: HOUR_OF_DAY: 2 -&gt; 3)</span></span><br><span class="line">sqoop import \</span><br><span class="line">--connect <span class="string">&quot;jdbc:mysql://520.13.14.9999:250/love?tinyInt1isBit=false&amp;serverTimezone=Asia/Shanghai&quot;</span> \</span><br><span class="line">--username root \</span><br><span class="line">--password root \</span><br><span class="line">--table dwd_ann_log_appinfo \</span><br><span class="line">--hive-import \</span><br><span class="line">--num-mappers 40 \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--fields-terminated-by <span class="string">&quot;\t&quot;</span> \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--create-hive-table \</span><br><span class="line">--hive-table LeleWeather.dwd_event_appinfo_history1 \</span><br><span class="line">--<span class="built_in">where</span> <span class="string">&quot;datekey &lt;= 20210601&quot;</span> \</span><br><span class="line">--null-string  <span class="string">&#x27;\\N&#x27;</span> \</span><br><span class="line">--null-non-string <span class="string">&#x27;\\N&#x27;</span> \</span><br><span class="line">--hive-delims-replacement <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">注：一定记得url加引号,否则&amp;无法正确解析,将报错-bash: --username: 未找到命令</span><br></pre></td></tr></table></figure>

<p>(三)sqlServer使用示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#1.列出数据库</span></span><br><span class="line">sqoop list-databases --connect <span class="string">&quot;jdbc:sqlserver://520.13.14.9999:250&quot;</span> -username root -password <span class="string">&#x27;root&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.列出库下所有表</span></span><br><span class="line">sqoop list-tables --connect <span class="string">&quot;jdbc:sqlserver://520.13.14.9999:250;DatabaseName=love&quot;</span> -username root -password <span class="string">&#x27;root&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.查询表数据</span></span><br><span class="line">sqoop <span class="built_in">eval</span> --connect <span class="string">&quot;jdbc:sqlserver://520.13.14.9999:250&quot;</span> -username root -password <span class="string">&#x27;root&#x27;</span> --query <span class="string">&quot;SELECT top 1 * from reportHouse.dbo.fact_userInfo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.导入</span></span><br><span class="line">sqoop import \</span><br><span class="line">--connect <span class="string">&quot;jdbc:sqlserver://520.13.14.9999:250;DatabaseName=love&quot;</span> \</span><br><span class="line">--username root \</span><br><span class="line">--password root \</span><br><span class="line">--query <span class="string">&#x27;select top 2 * from reportHouse.dbo.fact_userInfo WHERE $CONDITIONS&#x27;</span> \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--hive-import \</span><br><span class="line">--target-dir /user/hive/warehouse/mht.db/ods/fact_userInfo_loadtest \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--fields-terminated-by <span class="string">&quot;\t&quot;</span> \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--hive-table mht.fact_userInfo_loadtest \</span><br><span class="line">--create-hive-table \</span><br><span class="line">--null-string  <span class="string">&#x27;\\N&#x27;</span> \</span><br><span class="line">--null-non-string <span class="string">&#x27;\\N&#x27;</span> \</span><br><span class="line">--hive-delims-replacement <span class="string">&#x27; &#x27;</span></span><br></pre></td></tr></table></figure>

<p>(四)函数封装sqoop脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 定义一个函数，执行sqoop命令，所以执行脚本应该在sqoop/bin下面</span></span><br><span class="line"><span class="function"><span class="title">sq</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">sqoop import \</span><br><span class="line">--connect jdbc:mysql://520.13.14.9999:250/love \</span><br><span class="line">--username root \</span><br><span class="line">--password root \</span><br><span class="line">--table <span class="variable">$1</span> \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--hive-import \</span><br><span class="line">--fields-terminated-by <span class="string">&quot;\t&quot;</span> \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--hive-database yyplatform \</span><br><span class="line">--hive-table <span class="variable">$1</span></span><br><span class="line">--null-string  <span class="string">&#x27;\\N&#x27;</span> \</span><br><span class="line">--null-non-string <span class="string">&#x27;\\N&#x27;</span> \</span><br><span class="line">--hive-delims-replacement <span class="string">&#x27; &#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sq iskyshop_activeinfo</span><br><span class="line">sq iskyshop_activeinfo_goods</span><br><span class="line">sq iskyshop_address</span><br><span class="line">sq iskyshop_area</span><br><span class="line">sq iskyshop_brand</span><br><span class="line">sq iskyshop_chosengoods</span><br><span class="line">sq iskyshop_choseninfo</span><br><span class="line">sq iskyshop_chosenuser</span><br></pre></td></tr></table></figure>

<p>持续更新中……</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>sqoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>sqoop</tag>
      </tags>
  </entry>
  <entry>
    <title>诗集《记忆的永恒》</title>
    <url>/2022/04/15/%E8%AF%97%E9%9B%86%E3%80%8A%E8%AE%B0%E5%BF%86%E7%9A%84%E6%B0%B8%E6%81%92%E3%80%8B/</url>
    <content><![CDATA[<br>

<p>下载方式：<br>火狐浏览器：右上角&gt;&gt;下载<br>谷歌浏览器：另存为pdf </p>
<div class="pdfobject-container" data-target="记忆的永恒.pdf" data-height="500px"></div> 


<br>
]]></content>
      <categories>
        <category>文学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>文学</tag>
      </tags>
  </entry>
  <entry>
    <title>读《三体I》有感</title>
    <url>/2022/02/17/%E8%AF%BB%E3%80%8A%E4%B8%89%E4%BD%93I%E3%80%8B%E6%9C%89%E6%84%9F/</url>
    <content><![CDATA[<p style="text-indent:2em;">在叶文洁接收到木星高频电波的那个夜晚，一切形如往常，雷达峰寂静地熟睡在大兴安岭的襁褓中。此时太阳正在南半球散发着光与热，殊不知，整个星系即将结束它的田园时代。</p>
<p style="text-indent:2em;">从红卫兵的四条皮鞭，到物理学家血淋淋的尸体，到那个送她《寂静的春天》之人的背叛，再到她拒绝签字认罪，她都沉默接受了。然而这次，面对宇宙文明发来的“不要回复”，她应该继续沉默吗?</p>
<p style="text-indent:2em;">她站在雷达峰顶，凝望着远处齐家屯的灯火，仿佛凝望的是宇宙中陌生的星体。她从来信中甚至瞥到了一丝善意，这更加坚定了她的计划。</p>
<p style="text-indent:2em;">4光年外的1379号监听站，监听员所担心的事还是发生了:到这里来吧!我们的文明已无力解决现有的问题……”善意的监听员听到了，而同时接收到的，还有宇宙中极力隐藏着自己的高等文明。不久后，智子封锁了地球科学，三体舰队航向地球……</p>
<p style="text-indent:2em;">“你们是虫子”</p>
<p style="text-indent:2em;">这一切都超出了叶文洁的预想，她站在雷达峰顶，看着西方的余晖:“这是人类的末日。”</p>
<p style="text-indent:2em;">而人类真的有这么不堪吗?人类一直是顽强的，就像华北平原的蝗虫一样从未绝迹，努力活完短短的一生，把成果留给后代继承，如此循环往复，不断成长，真的很了不起。然而这些都将成为地球往事，450年后将不复存在……</p>
<p style="text-indent:2em;">叶文洁乌托邦式的幻想固然没错，错就错在她不明白一个道理:如果乌托邦不存在，那现世即为乌托邦。</p>
]]></content>
      <categories>
        <category>文学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>文学</tag>
        <tag>读后感</tag>
        <tag>三体</tag>
      </tags>
  </entry>
</search>
